<%
  const type = locals.type;
  const properties = locals.properties;
-%>
// This file is generated. Edit android/platform/scripts/generate-style-code.js, then run `make android-style-code`.
package com.mapbox.mapboxsdk.testapp.style;

import android.graphics.Color;
import android.support.test.espresso.Espresso;
import android.support.test.rule.ActivityTestRule;
import android.support.test.runner.AndroidJUnit4;
import timber.log.Timber;

import com.mapbox.mapboxsdk.maps.MapboxMap;
import com.mapbox.mapboxsdk.style.functions.ZoomFunction;
import com.mapbox.mapboxsdk.style.layers.<%- camelize(type) %>Layer;
import com.mapbox.mapboxsdk.testapp.R;
import com.mapbox.mapboxsdk.testapp.activity.style.RuntimeStyleTestActivity;
import com.mapbox.mapboxsdk.testapp.utils.OnMapReadyIdlingResource;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import static com.mapbox.mapboxsdk.style.functions.Function.*;
import static org.junit.Assert.*;
import static com.mapbox.mapboxsdk.style.layers.Property.*;
import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.*;

/**
 * Basic smoke tests for <%- camelize(type) %>Layer
 */
@RunWith(AndroidJUnit4.class)
public class <%- camelize(type) %>LayerTest extends BaseStyleTest {

  @Rule
  public final ActivityTestRule<RuntimeStyleTestActivity> rule = new ActivityTestRule<>(RuntimeStyleTestActivity.class);

  private <%- camelize(type) %>Layer layer;

  private OnMapReadyIdlingResource idlingResource;

  private MapboxMap mapboxMap;

  @Before
  public void setup() {
    idlingResource = new OnMapReadyIdlingResource(rule.getActivity());
    Espresso.registerIdlingResources(idlingResource);
    mapboxMap = rule.getActivity().getMapboxMap();

<% if (type === 'background') { -%>
    Timber.i("Retrieving layer");
    layer = mapboxMap.getLayerAs("background");
<% } else { -%>
    if ((layer = mapboxMap.getLayerAs("my-layer")) == null) {
      Timber.i("Adding layer");
      layer = new <%- camelize(type) %>Layer("my-layer", "composite");
      layer.setSourceLayer("composite");
      mapboxMap.addLayer(layer);
      //Layer reference is now stale, get new reference
      layer = mapboxMap.getLayerAs("my-layer");
    }
<% } -%>
  }

  @Test
  public void testSetVisibility() {
    checkViewIsDisplayed(R.id.mapView);
    Timber.i("Visibility");
    assertNotNull(layer);

    //Get initial
    assertEquals(layer.getVisibility().getValue(), VISIBLE);

    //Set
    layer.setProperties(visibility(NONE));
    assertEquals(layer.getVisibility().getValue(), NONE);
  }

<% for (const property of properties) { -%>
  @Test
  public void test<%- camelize(property.name) %>AsConstant() {
    checkViewIsDisplayed(R.id.mapView);
    Timber.i("<%- property.name %>");
    assertNotNull(layer);

    //Set and Get
    layer.setProperties(<%- camelizeWithLeadingLowercase(property.name) %>(<%- defaultValueJava(property) %>));
    assertEquals((<%- propertyType(property) %>) layer.get<%- camelize(property.name) %>().getValue(), (<%- propertyType(property) %>) <%- defaultValueJava(property) %>);
  }
<% if (supportsZoomFunction(property)) { -%>

  @Test
  public void test<%- camelize(property.name) %>AsZoomFunction() {
    checkViewIsDisplayed(R.id.mapView);
    Timber.i("<%- property.name %>");
    assertNotNull(layer);

    //Set
    layer.setProperties(
      <%- camelizeWithLeadingLowercase(property.name) %>(
        zoom(
<% if (property.function == 'piecewise-constant') { -%>
          //Interval stops (explicit)
          INTERVAL,
<% } else { -%>
          //Exponential stops (implicit)
          0.5f,
<% } -%>
          stop(2, <%- camelizeWithLeadingLowercase(property.name) %>(<%- defaultValueJava(property) %>))
        )
      )
    );

    //Verify
    assertNotNull(layer.get<%- camelize(property.name) %>());
    assertNotNull(layer.get<%- camelize(property.name) %>().getFunction());
    assertEquals(ZoomFunction.class, layer.get<%- camelize(property.name) %>().getFunction().getClass());
    assertEquals(1, layer.get<%- camelize(property.name) %>().getFunction().getStops().length);
<% if (property.function == 'piecewise-constant') { -%>
    assertEquals(INTERVAL, layer.get<%- camelize(property.name) %>().getFunction().getType());
<% } else { -%>
    assertEquals((Float) 0.5f, layer.get<%- camelize(property.name) %>().getFunction().getBase());
<% } -%>
  }
<% } -%>
<% if (property.type == 'color') { -%>

  @Test
  public void test<%- camelize(property.name) %>AsIntConstant() {
    checkViewIsDisplayed(R.id.mapView);
    Timber.i("<%- property.name %>");
    assertNotNull(layer);

    //Set and Get
    layer.setProperties(<%- camelizeWithLeadingLowercase(property.name) %>(Color.RED));
    assertEquals(layer.get<%- camelize(property.name) %>AsInt(), Color.RED);
  }
<% } -%>

<% } -%>

  @After
  public void unregisterIntentServiceIdlingResource() {
    Espresso.unregisterIdlingResources(idlingResource);
  }
}
